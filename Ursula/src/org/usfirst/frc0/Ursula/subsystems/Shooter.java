// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Ursula.subsystems;

import org.usfirst.frc0.Ursula.RobotMap;
import org.usfirst.frc0.Ursula.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.Subsystem;

//Import shooter constants from separate class
import constants.ShooterConstants;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController intakeMotor = RobotMap.shooterIntakeMotor;
    private final SpeedController leftShooterMotor = RobotMap.shooterLeftShooterMotor;
    private final SpeedController rightShooterMotor = RobotMap.shooterRightShooterMotor;
    private final Encoder leftShooterEncoder = RobotMap.shooterLeftShooterEncoder;
    private final Encoder rightShooterEncoder = RobotMap.shooterRightShooterEncoder;
    private final DigitalInput limitSwitch = RobotMap.shooterLimitSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    ShooterConstants constant = new ShooterConstants();

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        leftShooterMotor.set(constant.leftShooterSpeed());
        rightShooterMotor.set(constant.rightShooterSpeed());
    }
    
    /*Turns on the intake mechanism
     * Turns off when a ball is sensed in the robot
     */
    public void intakeOn() {
    	
    	//If the limit switch is not activated, keep turning the intake
    	//When the limit switch is activated, the ball is now loaded
    	//To stop the ball from being pushed into the shooter and firing,
    	//we stop the intake when the ball limit switch is activated
    	if(!limitSwitch.get()) {
    		intakeMotor.set(constant.intakeSpeed());
    	}
    	else {
    		intakeMotor.set(constant.intakeStopSpeed());
    	}
    		
    }
    
    //Turns off the intake mechanism
    public void intakeOff() {
    	intakeMotor.set(constant.intakeStopSpeed());
    }
    
    //Variable used in following method for toggle state. Should start true
    //1 and 0 doesn't seem to work, only true/false
    private boolean shooterToggleState = true;
    //Toggles shooter wheel rotation on/off
    public void shooterToggle() {
    	if(shooterToggleState) {
    		leftShooterMotor.set(constant.leftShooterStopSpeed());
    		rightShooterMotor.set(constant.rightShooterStopSpeed());
    		shooterToggleState = !shooterToggleState;
    	}
    	//DON'T USE ANOTHER IF HERE
    	//It would run, because we've already changed the boolean value
    	else {
    		leftShooterMotor.set(constant.leftShooterSpeed());
    		rightShooterMotor.set(constant.rightShooterSpeed());
    		shooterToggleState = !shooterToggleState;
    	}
    }
    
    //NOTE: Does not include timer. Only sets intake rotation
    //Uses intake to return the ball out the front of the robot
    public void lowGoalShoot() {
    	intakeMotor.set(constant.lowGoalShotSpeed());
    }
    
    //NOTE: Shoot motor speed should already be set, this just feeds the ball into the wheels
    //Includes no timers
    public void highGoalShoot() {
    	intakeMotor.set(constant.intakeFeedSpeed());
    }
}

