// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Ursula;

import org.usfirst.frc0.Ursula.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc0.Ursula.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shooterFire;
    public JoystickButton shooterIntake;
    public JoystickButton lowGoalFire;
    public JoystickButton armUpButton;
    public JoystickButton armDownBotton;
    public JoystickButton portcullisAuto;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        portcullisAuto = new JoystickButton(joystick1, 12);
        portcullisAuto.whenPressed(new Portcullis());
        armDownBotton = new JoystickButton(joystick1, 13);
        armDownBotton.whileHeld(new ArmDown());
        armUpButton = new JoystickButton(joystick1, 15);
        armUpButton.whileHeld(new ArmUp());
        lowGoalFire = new JoystickButton(joystick1, 2);
        lowGoalFire.whileHeld(new RollBallOut());
        shooterIntake = new JoystickButton(joystick1, 3);
        shooterIntake.whileHeld(new Intake());
        shooterFire = new JoystickButton(joystick1, 1);
        shooterFire.whileHeld(new Shoot());


        // SmartDashboard Buttons
        SmartDashboard.putData("Intake", new Intake());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("Roll Ball Out", new RollBallOut());
        SmartDashboard.putData("Arm Up", new ArmUp());
        SmartDashboard.putData("Arm Down", new ArmDown());
        SmartDashboard.putData("Arm Stop", new ArmStop());
        SmartDashboard.putData("Arm To Top", new ArmToTop());
        SmartDashboard.putData("Arm To  Bottom", new ArmToBottom());
        SmartDashboard.putData("Portcullis", new Portcullis());
        SmartDashboard.putData("Drive Forwards", new DriveForwards());
        SmartDashboard.putData("Drive", new Drive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

